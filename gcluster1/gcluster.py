# -*- coding: utf-8 -*-
"""Gcluster.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19ZffHy_9SDExAMUu06MR6tY26phSQpYW
"""

import pandas as pd
import numpy  as np

h_data = pd.read_csv('C48H_data.csv')

h_data

h_data=h_data.to_numpy()

h_data=np.insert(h_data,5,-1,axis=1)

pd.DataFrame(h_data)

epsilon = 50
minForce = 0.0845
minCell = 3
max_t=max(h_data[:,-2])

def tNorm(t):
  global max_t
  return float(t/max_t)

def calcForce(t1,t2,u11,u12,u21,u22):
  global epsilon
  u11,u12,u21,u22 = u11*epsilon,u12*epsilon,u21*epsilon,u22*epsilon
  numerator = tNorm(t1)*tNorm(t2)
  denominator = ((((u11-u21)**2)+((u12-u22)**2))**0.5)**2# (abs(u11-u21)+abs(u12-u22))**2
  return float(numerator/denominator)
def isAdjecent(c11,c12,c21,c22):
  return ((abs(c11-c21) <= 1.0) and (abs(c12-c22) <= 1.0))

from tqdm import trange

graph_number = 0
counting_table={-1:0}
for i in trange(len(h_data)):
  for j in range(len(h_data)):
    if (i != j) and h_data[j,5] == -1 and isAdjecent(h_data[i,0],h_data[i,1],h_data[j,0],h_data[j,1]):
      if calcForce(h_data[i,4],h_data[j,4],h_data[i,2],h_data[i,3],h_data[j,2],h_data[j,3])>=minForce:
        if h_data[i,5] == -1.0:
          h_data[i,5] = graph_number
          counting_table[graph_number] = 1
          graph_number = graph_number+1
        h_data[j,5] = h_data[i,5]
        counting_table[h_data[i,5]] = counting_table[h_data[i,5]] + 1

from matplotlib import pyplot as plt

plt.scatter(h_data[:,0],h_data[:,1],c=h_data[:,5])
plt.savefig('c48/undiscarded')

discarded = [i for i in h_data if counting_table[i[5]]-1 >= minCell]
discarded=np.array(discarded)

fig, ax = plt.subplots()
ax.scatter(discarded[:,0],discarded[:,1],c=discarded[:,5])
n=0
label_table ={}
for i in range(len(discarded)):
  if discarded[i,5] not in label_table:
    label_table[discarded[i,5]]=n
    n=n+1
plt.savefig('c48/discarded_unlabel.png')
for i in trange(len(discarded)):
    ax.annotate(label_table[discarded[i,5]], (discarded[i,0], discarded[i,1]),fontsize=8)
plt.savefig('c48/discarded.png')



hdata=pd.read_csv('/content/C48H_data.csv')
odata=pd.read_csv('/content/C48original_data.csv')

odata

plt.scatter(odata.iloc[:,2],odata.iloc[:,3],c=odata.iloc[:,4])
plt.savefig('c48/ideal.png')

ori =  pd.read_csv('/content/C48original_data.csv')
plt.scatter(ori.iloc[:,0],ori.iloc[:,1],c=ori.iloc[:,2])
plt.savefig('c48/unsummerized.png')

